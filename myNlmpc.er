math = pyimport "math"
np = pyimport "numpy"
pd = pyimport "pandas"
scipy = pyimport "scipy"
http = pyimport "http"

# state = v, a, b, wz, psi, x, y, dist, ax, ay, bDot, wzDot, xJerk, yJerk, i
# u = jerk, delta
# state の内容
enum S: Nat {
    v = 0,
    a,
    b,
    wz,
    psi,
    x,
    y,
    dist,
    ax,
    ay,
    bDot,
    wzDot,
    xJerk,
    yJerk,
    i
}
enum DS: Nat {
    vDot = 0,
    aDot,
    bDot,
    wzDot,
    psiDot,
    xDot,
    yDot,
    ax,
    ay,
    xJerk,
    yJerk
}
enum U: Nat {
    jerk = 0,
    delta
}

class Vehicle:
    def init(self) ->
        self.a1: Float = -(32000.0 + 32000.0) / 1100.0
        self.a2: Float = (32000.0 * 1.25 - 32000.0 * 1.15) / 1100.0 - 1
        self.a3: Float = 32000.0 / 1100.0
        self.a4: Float = -1 / 1100.0
        self.b1: Float = (32000.0 * 1.25 - 32000.0 * 1.15) / 1600
        self.b2: Float = -(32000.0 * (1.15 ** 2) + 32000.0 * (1.25 ** 2)) / 1600
        self.b3: Float = (32000.0 * 1.15) / 1600

    def dynamics(self, state: [Float], u: [Float]) -> [Float]:
        v = state[S.v]
        a = state[S.a]
        b = state[S.b]
        wz = state[S.wz]
        psi = state[S.psi]
        jerk = u[U.jerk]
        delta = u[U.delta]
        vDot = a
        aDot = jerk
        bDot = self.a1 * b / v + self.a2 * wz / (v ** 2) - wz + self.a3 * delta / v + self.a4 * a * b / v
        wzDot = self.b1 * b + self.b2 * wz / v + self.b3 * delta
        psiDot = wz
        ax = a - v * b * wz
        ay = v * bDot + a * b + v * wz
        xDot = (cos(psi) * v - sin(psi) * v * b)
        yDot = (sin(psi) * v + cos(psi) * v * b)
        xJerk = jerk - a * b * wz - v * bDot * wz - v * b * wzDot
        yJerk = a * bDot + jerk * b + a * bDot + a * wz + v * wzDot
        [vDot, aDot, bDot, wzDot, psiDot, xDot, yDot, ax, ay, xJerk, yJerk]

class MPC:
    def init(self) ->
        self.vehicle = Vehicle()
        self.dt: Float = 0.1
        self.N: Nat = 10
        self.nx: Nat = len(S)
        self.nu: Nat = len(U)
        self.q1: Float = 0.5
        self.q2: Float = 0.2
        self.q3: Float = 0.15
        self.q4: Float = 0.15
        tmp = pd.read_csv("zhouPath.csv", header=None)
        self.pathRef = tmp.T.values.tolist()
        self.kd_tree = KDTree([row[0:2] for row in self.pathRef])
        self.bounds = [(-1, 1), (-1.57, 1.57)] * self.N

    def update_state(self, state: [Float], u: [Float]) -> [Float]:
        dt: Float = self.dt
        dstate: [Float] = self.vehicle.dynamics(state, u)
        dist, i = self.find_closest_point(state[S.x] + dstate[DS.xDot] * dt, state[S.y] + dstate[DS.yDot] * dt)
        state_next: [Float] = [state[S.v] + dstate[DS.vDot] * dt, state[S.a] + dstate[DS.aDot] * dt, state[S.b] + dstate[DS.bDot] * dt, state[S.wz] + dstate[DS.wzDot] * dt, state[S.psi] + dstate[DS.psiDot] * dt, state[S.x] + dstate[DS.xDot] * dt, state[S.y] + dstate[DS.yDot] * dt, dist, dstate[DS.bDot], dstate[DS.wzDot], dstate[DS.ax], dstate[DS.ay], dstate[DS.xJerk], dstate[DS.yJerk], i]
        state_next

    def solve(self, state: [Float], u_init: [Float]?) -> [Float]:
        if u_init == None:
            u_init = np.zeros(self.nu * self.N)
        cons = [
            {'type': 'ineq', 'fun': self.lb_dist_cons, 'args': state},
            {'type': 'ineq', 'fun': self.ub_dist_cons, 'args': state},
            {'type': 'ineq', 'fun': self.lb_v_cons, 'args': state},
            {'type': 'ineq', 'fun': self.ub_v_cons, 'args': state},
            {'type': 'ineq', 'fun': self.lb_ax_cons, 'args': state},
            {'type': 'ineq', 'fun': self.ub_ax_cons, 'args': state},
            {'type': 'ineq', 'fun': self.lb_xJerk_cons, 'args': state},
            {'type': 'ineq', 'fun': self.ub_xJerk_cons, 'args': state},
        ]
        result = minimize(self.cost_function, u_init, args=(state,), bounds=self.bounds, constraints=cons, method='SLSQP')
        result.x[0:2] # 制御入力を return

    def cost_function(self, u: [Float], *args) -> Float:
        state: [Float] = args[0]
        cost: Float = 0.0
        for i in range(self.N):
            state = self.update_state(state, u[i*2:(i+1)*2])
            v = state[S.v]
            dist = state[S.dist]
            ax = state[S.ax]
            ay = state[S.ay]
            xJerk = state[S.xJerk]
            cost += (self.q2 * (xJerk ** 2)) + (self.q3 * (ax ** 2)) + (self.q4 * (ay ** 2))
            if v > 17:
                cost = 10000
            if dist > 0.65:
                cost = 10000
            if dist < -0.65:
                cost = 10000
        cost

    def find_closest_point(self, px: Float, py: Float) -> (Float, Nat):
        dist, i = self.kd_tree.query([px, py], k=1)
        (dist, i)

    # 制約関数
    def lb_dist_cons(self, u: [Float], *args) -> Float:
        state = args
        for i in range(self.N):
            state = self.update_state(state, u[i*2:(i+1)*2])
        state[S.dist] + 0.65

    def ub_dist_cons(self, u: [Float], *args) -> Float:
        state = args
        for i in range(self.N):
            state = self.update_state(state, u[i*2:(i+1)*2])
        0.65 - state[S.dist]

    def lb_v_cons(self, u: [Float], *args) -> Float:
        state = args
        for i in range(self.N):
            state = self.update_state(state, u[i*2:(i+1)*2])
        state[S.v] - 5

    def ub_v_cons(self, u: [Float], *args) -> Float:
        state = args
        for i in range(self.N):
            state = self.update_state(state, u[i*2:(i+1)*2])
        16.7 - state[S.v]
